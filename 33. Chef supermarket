1) So here we are going to have a look at the chef supermarket
    https://supermarket.chef.io/
2) This is a community cookbook site, where we are going to get the cookbooks written by other people, and we
    can use them in our cookbooks.
3) We can make use of two tyes of cookbooks from supermarket,
    a) the community cookbooks which share the recipes that we can use in our cookbook by extending its functionality
    b) the community cookbooks which share the user created resources based on the cookbook need and functionality
        if we use that cookbook in our recipe then we can meke use of the user created resources as well in our recipe

Wrapper cookbooks
==================
This is a cookbook that we maintain and we manage. inside of this cookbook we could define our own values for 
attribute for instance. we can than call our dependancy cookbook as a library and then utilize all the recipes
inside of it without touching its content of our upstream cookbook or library 

So here we are going to learn how to utilize wrapper cookbook in order to utilize haproxy from the supermarket,
without modifying any of its code or recipe 

So lets go ahead and create our own wrapper cookbook 
=====================================================
1) create the cookbook named : myhaproxy
# chef generate cookbook cookbooks/myhaproxy
2) once myhaproxy cookbook is created, we have open up the metadata.rb file and update the dependancy the
    help of "depends" keyword
    # cookbooks/myhaproxy/metadata.rb
    add the below line in this file 
    ==>depends 'haproxy', '~> 6.2.5'
    Now here we are adding the name of the cookbook at supermarket, below is the URL for the same 
    followed by the name of the cookbook we have mentioned the version of the cookbook using the special
    operator ~>(passimistic operator). What this operator does is that it will download the minnor release
    of this cookbook as 6.2 and after that whatever latest patch release is available, it will download.
    URL ==> https://supermarket.chef.io/cookbooks/haproxy
3) Now once you add this dependancy in the metadata.rb file, now our cookbook myhaproxy is wrapping the community
    cookbook haproxy 
4) Now to make use of this haproxy community cookbook, we have to use the required attributes and settings in our   
    cookbook.
5) So now to find out how to use the resources extended by this haproxy community cookbook, there is a suggestion 
    from the author have shared the information that we have have a look at the test section of the cookbook to
    see the examples of usage of this cookbook resources.
    location : https://github.com/sous-chefs/haproxy/blob/master/test/fixtures/cookbooks/test/recipes/config_array.rb
    with the help of example in this recipe, we will try to pass our web server names in the array format.
6) So taking the required resources from the config_array.rb recipe under the test directory in the community cookbook
    we will add them in our myhaproxy default recipe in order to utilize them.
    # /c/Users/Sagar/projects/chef/chef-repo/cookbooks/myhaproxy/recipes/default.rb
    See this recipe file to under stand how we have used the resources of this community cookbook
7) So now that we have updated our recipe of the cookbook myhaproxy with the required user created resources provided by the haproxy
    community cookbook. Its time for us to upload this myhaproxy cookbook to the chef server.
    but as we know that our this cookbook is not a standalone normal cookbook, its a wrapper cookbook which depends on another 
    community cookbook haproxy.
8) So here we will not make use of simple knife command to upload our cookbook to chef server. here we are going to make use of berkshelf
    utility which is not only going to upload my cookbook, but also all its dependency based on the versions and dependancy information
    mentioned in the metadata file.
9) So the command used for that is berks command. and this berks command will check the information from the file called as berksfile
    which is created by default as the part of cookbook creation.
    inside the berksfile, we have the information for source, from where berks will download the dependency and also the place to get the 
    depends cookbook.
    So the data inside the berks file is:
    =====================================================
    source 'https://supermarket.chef.io'

    metadata
    ======================================================
10) Also notice that to run any command related to berks, you need to be inside the directory at same level as that
    of the berksfile
11) So lets move to the below directory and run
    # pwd => /c/Users/Sagar/projects/chef/chef-repo/cookbooks/myhaproxy
    # berks install
    Now based on the information provided inside the berksfile related to the source and the metadata file, bersk is going to download
    all the depending cookbooks required from the supermarked. including haproxy as well.
12) If you want to see these cookbooks that are downloaded from the supermarket you can see them under below location in your cookbook
    /c/Users/Sagar/.berkself
    here you will see all the cookbooks downloaded from community will be visible here.
13) So once every dependancy is downloaded from supermarket with berks install command, its time to make use
    of "berks upload" command to upload our cookbook along with its dependancy as well.
14) notice that bersk upload not only upload the dependancy cookbooks, it also check the sytax error in the cookbooks
    before uploading all of them in one sweep.
    # cd /c/Users/Sagar/projects/chef/chef-repo/cookbooks/myhaproxy
    # berks upload
    After checking all the sytax error and all, its going to upload all our cookbooks along with all its 
    dependancy to chef server.
15) if you get any syntax error while uploading the cookbooks to chef server using berks command, we can use    
    one more utility that comes with chefdk named as  cookstyle from robocup
    # cookstyle myhaproxy
    then correct the errors and try uploading the cookbooks again.
16) after uploading
    # knife cookbook list
17) Now note that once you have uploaded any cookbook with some perticular verion in metadata, you won't be able to
    upload that file again using berks command even if you make changes to your cookbook, untill you change the 
    version of that cookbook,
18) But suppose if you want to override the dame cookbook version on chef server then you will have to make use of
    -f flag to forcefully upload the same version and override it,
    berks upload -f/--force
19 last thing to notice about the berks is another file created after we ran the berks install named as
    Berksfile.lock inside the same directory of level as that of berksfile. this Berksfile.lock file contain
    the graph which helps us getting to know what is dependant on what.