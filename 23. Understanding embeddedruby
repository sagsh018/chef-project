1) So till now we have seen what is the need of having template in our cookbook. 
2) template is a cookbook component, its an additional feature that your cookbook has, or its another folder that allows
    you to reference a component your recipes might need.
3) So lets go ahead and add template file in our workstation cookbook. we can do so with the help of below chef generate
    command 
    # pwd ==> /vagrant
    # chef generate template cookbooks/workstation/ motd
    This command will create a template directory inside our cookbook workstation and inside that we will have two
    files one is default and another one will be motd.erb file which will be our erb template file.
    Now this file could be something alse as well, like it could be index.html file as well for our webserver 
    cookbook
4) Below is the tree diagram for our cookbook after generating the template
cookbooks/workstation/
├── Berksfile
├── chefignore
├── metadata.rb
├── README.md
├── recipes
│   ├── default.rb
│   └── setup.rb
├── spec
│   ├── spec_helper.rb
│   └── unit
│       └── recipes
│           ├── default_spec.rb
│           ├── setup.rb_spec.rb
│           └── setup_spec.rb
├── templates
│   ├── default
│   └── motd.erb
└── test
    └── recipes
        ├── default_test.rb
        ├── setup.rb
        └── setup.rb.rb

8 directories, 14 files  
So, An ERB file is going to be an template file that allows us to build the code in its native file format. But after
this we could also insert any ruby expression and statements we would like into this ERB file  between specifically 
formatted tags 
for example, like that of HTML code goes inside the HTML tag, embedded ruby code goes inside the ERB tags.

5) So lets take a look at the simple ERB file below 
    ==============================================================
    <% if (50 + 50) == 100 %>
    50 + 50 = <%= 50 + 50 %>
    <% else %>
    At some point all of the MATH i have learned in school changed
    <% end %>
    ==============================================================
    Notice that each ERB tag has beginning tag and a matched ending tag.
    So what does these ERB tags means is :
    <%  %>:
    Execute the ruby code inside of these brackets but do not print the results to the template file. that means Execute
    the ruby login within these tags but do not insert anything to the file 
    <%= %>:
    The above tags are little bit different from the one we have studied first. here we are going to evaluate the 
    ruby code inside these tags and then print the result directly to the output file 

6) So lets try to put our knowledge we have gained from above ERB tags explaination into our motd file
    Please note that we are going to remove whatever we have mentioned inside the content of the file resource inside
    our setup.rb recipe.
    First have a look at the motd.erb file
    So if you will notice this motd.erb file we will see that the file is simply written in its native format, that is
    normal text message which we want to get printed on the screen when we login. and along with that we have also
    inserted the ruby code(node attributes) which will substituted by the exact values when we will run the chef-client
    and this template will be executed.
    Also notice that we can put any ruby code inside these ERB tags and they will be executed for us and behave based
    on the type of erb tags we will insert it into.

7) So now the last step it to reference this template file inside of out ruby recipe file of our cookbook.
    ==================
    template "/etc/motd" do
    source 'motd.erb'
    action :create
    end
    ========================
    and this is how we can add the template resource inside of our recipe and it will reference to our template
    erb file with the help of source tag and create our motd file when we will run the chef client.
8) So lets run the chef-client and see whether it updates by motd file or not.
    # pwd == > /vagrant
    # sudo chef-client -zr "recipe[workstation]"
    with this if you will check the file /etc/motd would be updated.
9) We could also pass the variables to our .erb template files from our recipes. we could pass the variables using the 
    variables ( ) syntax. check out the recipe setup.rb and the motd.erb file to understand how the is passwed and how
    it is been referenced in the template.
    setup.rb
    =========
    variables (
        {:name => "Sagar"}
    )
    motd.erb
    ========
    Name : <%= @name &>
    finally once again run the chef-client and we could see in the motd file on the server and we will see the name
    variable value passwed into it.

10 Finally we will also apply templates to our webserver cookbook and we will create a template "index.html.erb" and 
    try to populate our /var/www/html/index.html file with the same things which we are doing with the help of
    file resource.
    a) generate template inside webserver cookbook ==> chef generate template cookbooks/webserver/ index.html
    b) index.html.erb
       ===============
        <!DOCTYPE html>          
        <html>
        <head>
            <meta charset=" utf-8 ">
            <title>Web Server Main Page</title>
        </head>
        <body>
            <h1>Hello World..!<h1>
            <h2>Hostname :: <%= node['hostname'] %> </h2>
            <h2>IP Address :: <%= node['ipaddress'] %> </h2>
        </body>
        </html>
    c) server.rb
       =========
        template "WEB PAGE" do
            source "index.html.erb"
            path "/var/www/html/index.html"

            variables (
                { :name => "Sagar" }
            )
            action :create
        end
    d) run the cookbook using chef-client in local mode.
